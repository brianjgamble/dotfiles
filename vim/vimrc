call plug#begin()

Plug 'ctrlpvim/ctrlp.vim'            " Full path fuzzy finder
Plug 'elixir-lang/vim-elixir'        " Elixir support
Plug 'tpope/vim-rails'               " Plugin for Ruby on Rails
Plug 'othree/html5.vim'              " HTML5 support
Plug 'keith/rspec.vim'               " RSpec syntax highlighting
Plug 'francoiscabrol/ranger.vim'     " Ranger.vim
Plug 'rbgrouleff/bclose.vim'         " Needed to use ranger in neovim

call plug#end()

set nocompatible                  " Must come first because it changes other options.

" syntax enable                     " Turn on syntax highlighting.
if !exists("g:syntax_on")
    syntax enable
endif

filetype plugin indent on         " Turn on file type detection.
filetype on
filetype indent on

set showcmd                       " Display incomplete commands.
set showmode                      " Display the mode you're in.

set backspace=indent,eol,start    " Intuitive backspacing.

set hidden                        " Handle multiple buffers better.
set history=100                   " Increase command history

set wildmenu                      " Enhanced command line completion.
set wildmode=list:longest         " Complete files like a shell.

set ignorecase                    " Case-insensitive searching.
set smartcase                     " But case-sensitive if expression contains a capital letter.

set number                        " Show line numbers.
set ruler                         " Show cursor position.

set incsearch                     " Highlight matches as you type.
set hlsearch                      " Highlight matches.

set wrap linebreak nolist         " Turn on line wrapping.
set scrolloff=3                   " Show 3 lines of context around the cursor.

set title                         " Set the terminal's title

set noeb vb t_vb=                 " Disable beep and flash

set nobackup                      " Don't make a backup before overwriting a file.
set nowritebackup                 " And again.
set directory=$HOME/.vim/tmp//,.  " Keep swap files in one location
   
set tabstop=2                     " Global tab width.
set shiftwidth=2                  " And again, related.
set expandtab                     " Use spaces instead of tabs
set smartindent                   " Turn on smart indenting
set autoindent                    " Turn on auto identing

set laststatus=2                  " Show the status line all the time

set cursorline                    " Highlights current line

set lazyredraw

" Useful status information at bottom of screen
set statusline=[%n]\ %<%.99f\ %h%w%m%r%y\ %{exists('*CapsLockStatusline')?CapsLockStatusline():''}%=%-16(\ %l,%c-%v\ %)%P

" disable cursor-styling
set guicursor=

colorscheme onedark
set background=dark

" Highlight trailing whitespace
set listchars=trail:â€¢
highlight SpecialKey ctermfg=lightcyan

" The Silver Searcher
if executable('ag')
  " Use ag over grep
  set grepprg=ag\ --nogroup\ --nocolor

  " bind K to grep word under cursor
  nnoremap K :grep! "\b<C-R><C-W>\b"<CR>:cw<CR>

  " Configure CtrlP and use The Silver Searcher
  let g:ctrlp_map = '<leader>t'
  let g:ctrlp_cmd = 'CtrlP'
  let g:ctrlp_working_path_mode = 'ra'
  let g:ctrlp_user_command = 'ag %s -l --nocolor --hidden -g ""'
  let g:ctrlp_use_caching = 0
endif

" ===== Mappings =====
" 
" Map leader key to comma
let mapleader = ","

" Tab mappings.
map <leader>tt :tabnew<cr>
map <leader>te :tabedit
map <leader>tc :tabclose<cr>
map <leader>to :tabonly<cr>
map <leader>tn :tabnext<cr>
map <leader>tp :tabprevious<cr>
map <leader>tf :tabfirst<cr>
map <leader>tl :tablast<cr>
map <leader>tm :tabmove

" switch between files
map ,, <C-^>

" Shortcut to rapidly toggle `set list`
nmap <leader>l :set list!<CR>

