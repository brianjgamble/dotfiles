call plug#begin()

Plug 'ctrlpvim/ctrlp.vim'             " Full path fuzzy finder
Plug 'elixir-editors/vim-elixir'      " Elixir support
Plug 'othree/html5.vim'               " HTML5 support
Plug 'bfrg/vim-cpp-modern'            " C++ syntax highlighting
Plug 'ilyachur/cmake4vim'             " CMake integration to vim/neovim
Plug 'tpope/vim-endwise'              " Adding end after def, do, etc. 
Plug 'francoiscabrol/ranger.vim'      " Ranger.vim
Plug 'rbgrouleff/bclose.vim'          " Needed to use ranger in neovim
Plug 'vim-airline/vim-airline'        " Airline: Status/tabline for vim
Plug 'vim-airline/vim-airline-themes' " Airline: themes
Plug 'tpope/vim-fugitive'             " Vim plugin for Git
Plug 'airblade/vim-gitgutter'         " Shows git diff in the sign column

" Themes
Plug 'joshdick/onedark.vim'
Plug 'sainnhe/everforest'
Plug 'gentlelionstudios/gentledark.vim'
Plug 'arcticicestudio/nord-vim'

call plug#end()

set nocompatible                  " Must come first because it changes other options.

" syntax enable                     " Turn on syntax highlighting.
if !exists("g:syntax_on")
  syntax enable
endif

filetype plugin indent on         " Turn on file type detection.
filetype on
filetype indent on

set shell=bash                    " Since I'm not using a bash shell

set encoding=utf-8

set showcmd                       " Display incomplete commands.
set showmode                      " Display the mode you're in.

set backspace=indent,eol,start    " Intuitive backspacing.

set hidden                        " Handle multiple buffers better.
set history=100                   " Increase command history

set wildmenu                      " Enhanced command line completion.
set wildmode=list:longest         " Complete files like a shell.

set ignorecase                    " Case-insensitive searching.
set smartcase                     " But case-sensitive if expression contains a capital letter.

set number                        " Show line numbers.
set ruler                         " Show cursor position.

set incsearch                     " Highlight matches as you type.
set hlsearch                      " Highlight matches.

set wrap linebreak nolist         " Turn on line wrapping.
set scrolloff=3                   " Show 3 lines of context around the cursor.

set title                         " Set the terminal's title

set noeb vb t_vb=                 " Disable beep and flash

set nobackup                      " Don't make a backup before overwriting a file.
set nowritebackup                 " And again.
set directory=$HOME/.vim/tmp//,.  " Keep swap files in one location

set tabstop=2                     " Global tab width.
set shiftwidth=2                  " And again, related.
set expandtab                     " Use spaces instead of tabs
set smartindent                   " Turn on smart indenting
set autoindent                    " Turn on auto identing
set textwidth=80

set laststatus=2                  " Show the status line all the time

set cursorline                    " Highlights current line

set lazyredraw

set updatetime=1000               " Set updatetime to 1 second

" Useful status information at bottom of screen
set statusline=[%n]\ %<%.99f\ %h%w%m%r%y\ %{exists('*CapsLockStatusline')?CapsLockStatusline():''}%=%-16(\ %l,%c-%v\ %)%P

" disable cursor-styling
set guicursor=

" Configure color scheme
if has('termguicolors')
  set termguicolors
endif

set background=dark

let g:everforest_background = 'hard'
let g:everforest_better_performance = 1
colorscheme everforest

" Highlight trailing whitespace
set listchars=trail:â€¢
highlight SpecialKey ctermfg=lightcyan

" === The Silver Searcher
if executable('ag')
  " Use ag over grep
  set grepprg=ag\ --nogroup\ --nocolor

  " bind K to grep word under cursor
  nnoremap K :grep! "\b<C-R><C-W>\b"<CR>:cw<CR>

  " Configure CtrlP and use The Silver Searcher
  let g:ctrlp_map = '<leader>t'
  let g:ctrlp_cmd = 'CtrlP'
  let g:ctrlp_working_path_mode = 'ra'
  let g:ctrlp_user_command = 'ag %s -l --nocolor --hidden -g ""'
  let g:ctrlp_use_caching = 0
endif

" === cmake4vim
let g:cmake_build_type = 'Debug'

" === vim-airline

" Display all buffers when only 1 tab is open
let g:airline#extensions#tabline#enabled = 1

" Set how paths are displayed
let g:airline#extensions#tabline#formatter = 'default'

" Use powerline symbols
let g:airline_powerline_fonts = 1

" Change some of the symbols
if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif
let g:airline_symbols.colnr = "\ue0a3:"
let g:airline_symbols.branch = "\ue0c6"

" Set the theme
let g:airline_theme='everforest'

" ===== Mappings =====
" 
" Map leader key to comma
let mapleader = ","

" Tab mappings
map <leader>tt :tabnew<cr>
map <leader>te :tabedit
map <leader>tc :tabclose<cr>
map <leader>to :tabonly<cr>
map <leader>tn :tabnext<cr>
map <leader>tp :tabprevious<cr>
map <leader>tf :tabfirst<cr>
map <leader>tl :tablast<cr>
map <leader>tm :tabmove

" Switch between files
map ,, <C-^>

" Setup code formatters
autocmd FileType cpp setlocal formatprg=clang-format
autocmd FileType elixir setlocal formatprg=mix\ format\ -

" Temporary fix because of https://github.com/elixir-editors/vim-elixir/pull/560/files
au BufRead,BufNewFile *.eex,*.heex,*.leex,*.sface,*.lexs set filetype=eelixir
